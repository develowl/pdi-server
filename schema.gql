# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type UsersInfoModel {
  id: Int!
  user: UserModel!
  name: String!
  lastname: String!
  position: String
  hiringDate: DateTime
  badge: Int
  costCenter: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type UserModel {
  id: Int!
  info: UsersInfoModel!
  manager: UserModel
  department: DepartmentModel
  username: String!
  email: String!
  role: String!
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean!
  blocked: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
}

type DepartmentModel {
  id: Int!
  key: String!
  name: String
  createdAt: DateTime!
  updatedAt: DateTime!
  users: [UserModel!]
}

type JWT {
  jwt: String!
}

type QuestionModel {
  id: Int!
  ask: String
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
}

type SkillModel {
  id: Int!
  title: String
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
}

type VisibilityModel {
  user: Boolean!
  manager: Boolean!
  coordinator: Boolean!
  director: Boolean!
}

type SectionModel {
  id: Int!
  title: String
  visibility: VisibilityModel!
  questions: [QuestionModel!]
  skills: [SkillModel!]
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
}

type EvaluationDateModel {
  start: DateTime!
  deadline: DateTime!
}

type EvaluationModel {
  id: Int!
  year: Int!
  period: String!
  midDate: EvaluationDateModel!
  endDate: EvaluationDateModel!
  finished: Boolean!
  sections: [SectionModel!]
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
}

type GoalModel {
  id: Int!
  manager: UserModel!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
}

type KpiModel {
  id: Int!
  manager: UserModel!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
}

type Query {
  me(locale: String = "br"): UserModel!
  user(id: Int!, locale: String = "br"): UserModel!
  users(locale: String = "br"): [UserModel!]!
  usersInfo(id: Int!): UsersInfoModel!
  department(id: Int!, locale: String = "br"): DepartmentModel!
  departments(locale: String = "br", relations: [String!] = []): [DepartmentModel!]!
  section(id: Int!, locale: String = "br"): SectionModel!
  sections(locale: String = "br", relations: [String!] = []): [SectionModel!]!
  question(id: Int!, locale: String = "br"): QuestionModel!
  questions(locale: String = "br", relations: [String!] = []): [QuestionModel!]!
  skill(id: Int!, locale: String = "br"): SkillModel!
  skills(locale: String = "br", relations: [String!] = []): [SkillModel!]!
  evaluation(id: Int!, locale: String = "br"): EvaluationModel!
  evaluationByYear(year: Int!, locale: String = "br"): EvaluationModel!
  evaluations(locale: String = "br"): [EvaluationModel!]!
  goal(id: Int!, loadRelations: Boolean = false): GoalModel!
  goals: [GoalModel!]!
  kpi(id: Int!): KpiModel!
  kpis: [KpiModel!]!
}

type Mutation {
  signin(input: SignInInput!): JWT!
  createUser(input: CreateUserInput!): UserModel!
  updateUser(id: Int!, input: UpdateUserInput!): UserModel!
  removeUser(id: Int!): UserModel!
  populate: [UserModel!]!
  createUsersInfo(id: Float!, input: CreateUserInfoInput!): UsersInfoModel!
  updateUsersInfo(id: Float!, input: UpdateUserInfoInput!): UsersInfoModel!
  removeUsersInfo(id: Int!): UsersInfoModel!
  createDepartment(input: CreateDepartmentInput!): DepartmentModel!
  updateDepartment(id: Int!, input: UpdateDepartmentInput!): DepartmentModel!
  createSection(input: CreateSectionInput!): SectionModel!
  updateSection(id: Int!, input: UpdateSectionInput!): SectionModel!
  addSectionQuestion(id: Int!, idQuestion: Int!): Boolean!
  addSectionSkill(id: Int!, idSkill: Int!): Boolean!
  createQuestion(input: CreateQuestionInput!): QuestionModel!
  updateQuestion(id: Int!, input: UpdateQuestionInput!): QuestionModel!
  createSkill(input: CreateSkillInput!): SkillModel!
  updateSkill(id: Int!, input: UpdateSkillInput!): SkillModel!
  createEvaluation(input: CreateEvaluationInput!): EvaluationModel!
  addEvaluationSection(id: Int!, idSection: Int!): Boolean!
  updateEvaluation(id: Int!, input: UpdateEvaluationInput!): EvaluationModel!
  removeEvaluation(id: Int!): EvaluationModel!
  createGoal(input: GoalInput!): GoalModel!
  updateGoal(id: Int!, input: GoalInput!): GoalModel!
  removeGoal(id: Int!): GoalModel!
  createKpi(input: KpiInput!): KpiModel!
  updateKpi(id: Int!, input: KpiInput!): KpiModel!
  removeKpi(id: Int!): KpiModel!
}

input SignInInput {
  identifier: String!
  password: String!
}

input CreateUserInput {
  username: String!
  email: String!
  role: String = "user"
}

input UpdateUserInput {
  idManager: Int
  department: Int
  role: String
  confirmed: Boolean
  blocked: Boolean
  deleted: Boolean
}

input CreateUserInfoInput {
  position: String
  hiringDate: DateTime
  badge: Int
  costCenter: Int
  name: String!
  lastname: String!
}

input UpdateUserInfoInput {
  position: String
  hiringDate: DateTime
  badge: Int
  costCenter: Int
}

input CreateDepartmentInput {
  key: String!
  name: String!
}

input UpdateDepartmentInput {
  name: String!
  locale: String!
}

input CreateSectionInput {
  title: String!
  visibility: VisibilitySectionInput!
}

input VisibilitySectionInput {
  user: Boolean!
  manager: Boolean!
  coordinator: Boolean!
  director: Boolean!
}

input UpdateSectionInput {
  title: String
  visibility: VisibilitySectionInput
  locale: String = "br"
}

input CreateQuestionInput {
  ask: String!
}

input UpdateQuestionInput {
  ask: String!
  locale: String!
}

input CreateSkillInput {
  title: String!
  description: String!
}

input UpdateSkillInput {
  title: String
  description: String
  locale: String!
}

input CreateEvaluationInput {
  year: Int!
  mid: CreateEvaluationDateInput!
  end: CreateEvaluationDateInput!
  period: String = "out"
}

input CreateEvaluationDateInput {
  start: DateTime!
  deadline: DateTime!
}

input UpdateEvaluationInput {
  year: Int
  mid: CreateEvaluationDateInput
  end: CreateEvaluationDateInput
  period: String
  finished: Boolean
}

input GoalInput {
  name: String!
}

input KpiInput {
  name: String!
}
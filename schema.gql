# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ButtonModel {
  id: Int!
  label: String!
  loadingLabel: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type TextFieldModel {
  id: Int!
  labelPlaceholder: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
}

type UsersInfoModel {
  id: Int!
  user: UserModel!
  name: String!
  lastname: String!
  position: String
  hiringDate: DateTime
  badge: Int
  costCenter: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

type DepartmentModel {
  id: Int!
  key: String!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  users: [UserModel!]
}

type UserModel {
  id: Int!
  info: UsersInfoModel
  manager: UserModel
  department: DepartmentModel
  username: String!
  email: String!
  role: String!
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean!
  blocked: Boolean!
  picture: String
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
}

type JWT {
  jwt: String!
  user: UserModel!
}

type FeedbackModel {
  id: Int!
  inquire: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
}

type QuestionModel {
  id: Int!
  ask: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
}

type SkillModel {
  id: Int!
  title: String!
  description: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
}

type VisibilityModel {
  USER: Boolean!
  MANAGER: Boolean!
  COORDINATOR: Boolean!
  DIRECTOR: Boolean!
}

type SectionModel {
  id: Int!
  title: String!
  visibility: VisibilityModel!
  questions: [QuestionModel!]
  skills: [SkillModel!]
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
}

type EvaluationDateModel {
  start: DateTime!
  deadline: DateTime!
}

type EvaluationModel {
  id: Int!
  year: Int!
  period: String!
  midDate: EvaluationDateModel!
  endDate: EvaluationDateModel!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  sections: [SectionModel!]
  feedbacks: [FeedbackModel!]
}

type KpiModel {
  id: Int!
  goal: GoalModel!
  manager: UserModel!
  name: String!
  target: String!
  weight: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type GoalModel {
  id: Int!
  evaluation: EvaluationModel!
  manager: UserModel!
  user: UserModel!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  kpis: [KpiModel!]
}

type MediaModel {
  id: Int!
  filename: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PdiCompetenceCategoryModel {
  id: Int!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
}

type PdiCompetenceModel {
  id: Int!
  performed: PerformedEvaluationModel!
  category: PdiCompetenceCategoryModel!
  name: String!
  action: String!
  deadline: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PdiQualityModel {
  id: Int!
  performed: PerformedEvaluationModel!
  category: String!
  description: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
}

type PerformedFeedbackModel {
  id: Int!
  performed: PerformedEvaluationModel!
  feedback: FeedbackModel!
  midReply: String
  endReply: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type RatingModel {
  id: Int!
  description: String!
  value: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
}

type PerformedGoalKpiModel {
  id: Int!
  performedGoal: PerformedGoalModel!
  kpi: KpiModel!
  ratingManager: RatingModel
  achieved: String
  midFeedbackUser: String
  endFeedbackUser: String
  midFeedbackManager: String
  endFeedbackManager: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PerformedGoalModel {
  id: Int!
  performed: PerformedEvaluationModel!
  goal: GoalModel!
  createdAt: DateTime!
  updatedAt: DateTime!
  performedKpis: [PerformedGoalKpiModel!]
}

type PerformedQuestionModel {
  id: Int!
  performed: PerformedEvaluationModel!
  question: QuestionModel!
  reply: String
  justification: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PerformedSkillModel {
  id: Int!
  performed: PerformedEvaluationModel!
  skill: SkillModel!
  ratingUser: RatingModel
  ratingManager: RatingModel
  endFeedbackUser: String
  midFeedbackManager: String
  endFeedbackManager: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PerformedEvaluationModel {
  id: Int!
  evaluation: EvaluationModel!
  user: UserModel!
  grade: Float
  midFinished: Boolean!
  endFinished: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  questions: [PerformedQuestionModel!]!
  skills: [PerformedSkillModel!]!
  goals: [PerformedGoalModel!]!
  feedbacks: [PerformedFeedbackModel!]!
  pdiCoaching: [PdiCoachingModel!]!
  pdiCompetence: [PdiCompetenceModel!]!
  pdiQuality: [PdiQualityModel!]!
}

type PdiCoachingModel {
  id: Int!
  performed: PerformedEvaluationModel!
  category: String!
  action: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type EvaluationResultConceptModel {
  id: Int!
  concept: String!
  description: String!
  color: String!
  min: Float!
  max: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
}

type HomeModel {
  id: Int!
  title: String!
  description: String!
  button: ButtonModel!
  hero: String
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
}

type SignInModel {
  id: Int!
  title: String!
  caption: String!
  logo: String
  usernameTextField: TextFieldModel!
  passwordTextField: TextFieldModel!
  button: ButtonModel!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
}

type Query {
  me: UserModel!
  user(input: GetUserInput!): UserModel!
  users: [UserModel!]!
  team(id: Int): [UserModel!]!
  usersInfo(id: Int!): UsersInfoModel!
  department(id: Int!): DepartmentModel!
  departments: [DepartmentModel!]!
  section(id: Int!): SectionModel!
  sections: [SectionModel!]!
  question(id: Int!): QuestionModel!
  questions: [QuestionModel!]!
  skill(id: Int!): SkillModel!
  skills: [SkillModel!]!
  feedback(id: Int!): FeedbackModel!
  feedbacks: [FeedbackModel!]!
  evaluation(id: Int!): EvaluationModel!
  evaluationByYear(year: Int!): EvaluationModel!
  evaluations: [EvaluationModel!]!
  goal(id: Int!, loadRelations: Boolean = false): GoalModel!
  goals: [GoalModel!]!
  evaluationGoals(input: ListGoalInput!): [GoalModel!]!
  kpi(id: Int!): KpiModel!
  kpis: [KpiModel!]!
  pdiCoaching(id: Int!): PdiCoachingModel!
  pdiCoachings: [PdiCoachingModel!]!
  performedEvaluation(id: Int!): PerformedEvaluationModel!
  performedEvaluationGrade(id: Int!): PerformedEvaluationModel!
  performedEvaluationRelation(input: CreatePerformedEvaluationInput!): PerformedEvaluationModel!
  performedEvaluations: [PerformedEvaluationModel!]!
  pdiCompetence(id: Int!): PdiCompetenceModel!
  pdiCompetences: [PdiCompetenceModel!]!
  pdiCompetenceCategory(id: Int!): PdiCompetenceCategoryModel!
  pdiCompetencesCategories: [PdiCompetenceCategoryModel!]!
  pdiQuality(id: Int!): PdiQualityModel!
  pdiQualities: [PdiQualityModel!]!
  rating(id: Int!): RatingModel!
  ratings: [RatingModel!]!
  performedQuestion(id: Int!): PerformedQuestionModel!
  performedQuestions: [PerformedQuestionModel!]!
  performedSkill(id: Int!): PerformedSkillModel!
  performedSkills: [PerformedSkillModel!]!
  performedGoal(id: Int!): PerformedGoalModel!
  performedGoalByRelation(input: PerformedGoalInput!): PerformedGoalModel!
  performedGoals: [PerformedGoalModel!]!
  performedGoalKpi(id: Int!): PerformedGoalKpiModel!
  performedGoalsKpis: [PerformedGoalKpiModel!]!
  performedFeedback(id: Int!): PerformedFeedbackModel!
  performedFeedbacks: [PerformedFeedbackModel!]!
  media: [MediaModel!]!
  evaluationResultConcept(id: Int!): EvaluationResultConceptModel!
  evaluationResultConcepts: [EvaluationResultConceptModel!]!
  button(id: Int!): ButtonModel!
  buttons: [ButtonModel!]!
  textField: [TextFieldModel!]!
  homePage: HomeModel!
  signInPage: SignInModel!
}

input GetUserInput {
  id: Int
  username: String
  loadRelations: Boolean
}

input ListGoalInput {
  idEvaluation: Int!
  idUser: Int!
}

input CreatePerformedEvaluationInput {
  idEvaluation: Int!
  idUser: Int!
}

input PerformedGoalInput {
  idPerformed: Int!
  idGoal: Int!
}

type Mutation {
  signin(input: SignInInput!): JWT!
  createUser(input: CreateUserInput!): UserModel!
  createUserAdmin(input: CreateUserAdminInput!): UserModel!
  updateUser(id: Int!, input: UpdateUserInput!): UserModel!
  removeUser(id: Int!): UserModel!
  populate: [UserModel!]!
  createUsersInfo(id: Float!, input: CreateUserInfoInput!): UsersInfoModel!
  updateUsersInfo(id: Float!, input: UpdateUserInfoInput!): UsersInfoModel!
  removeUsersInfo(id: Int!): UsersInfoModel!
  createDepartment(input: CreateDepartmentInput!): DepartmentModel!
  updateDepartment(id: Int!, input: UpdateDepartmentInput!): DepartmentModel!
  createSection(input: CreateSectionInput!): SectionModel!
  updateSection(id: Int!, input: UpdateSectionInput!): SectionModel!
  addSectionQuestion(id: Int!, idQuestion: Int!): SectionModel!
  addSectionSkill(id: Int!, idSkill: Int!): SectionModel!
  createQuestion(input: CreateQuestionInput!): QuestionModel!
  updateQuestion(id: Int!, input: UpdateQuestionInput!): QuestionModel!
  createSkill(input: CreateSkillInput!): SkillModel!
  updateSkill(id: Int!, input: UpdateSkillInput!): SkillModel!
  createFeedback(input: CreateFeedbackInput!): FeedbackModel!
  updateFeedback(id: Int!, input: UpdateFeedbackInput!): FeedbackModel!
  createEvaluation(input: CreateEvaluationInput!): EvaluationModel!
  addEvaluationSection(id: Int!, idSection: Int!): EvaluationModel!
  addEvaluationFeedback(id: Int!, idFeedback: Int!): EvaluationModel!
  updateEvaluation(id: Int!, input: UpdateEvaluationInput!): EvaluationModel!
  removeEvaluation(id: Int!): EvaluationModel!
  createGoal(input: CreateGoalInput!): GoalModel!
  updateGoal(id: Int!, input: GoalInput!): GoalModel!
  removeGoal(id: Int!): GoalModel!
  createKpi(input: CreateKpiInput!): KpiModel!
  updateKpi(id: Int!, input: KpiInput!): KpiModel!
  removeKpi(id: Int!): KpiModel!
  createPdiCoaching(input: CreatePdiCoachingInput!): PdiCoachingModel!
  updatePdiCoaching(id: Int!, input: UpdatePdiCoachingInput!): PdiCoachingModel!
  removePdiCoaching(id: Int!): PdiCoachingModel!
  createPerformedEvaluation(input: CreatePerformedEvaluationInput!): PerformedEvaluationModel!
  updatePerformedEvaluation(id: Int!, input: UpdatePerformedEvaluationInput!): PerformedEvaluationModel!
  removePerformedEvaluation(id: Int!): PerformedEvaluationModel!
  createPdiCompetence(input: CreatePdiCompetenceInput!): PdiCompetenceModel!
  updatePdiCompetence(id: Int!, input: UpdatePdiCompetenceInput!): PdiCompetenceModel!
  removePdiCompetence(id: Int!): PdiCompetenceModel!
  createPdiCompetenceCategory(input: CreatePdiCompetenceCategoryInput!): PdiCompetenceCategoryModel!
  removePdiCompetenceCategory(id: Int!): PdiCompetenceCategoryModel!
  createPdiQuality(input: CreatePdiQualityInput!): PdiQualityModel!
  updatePdiQuality(id: Int!, input: UpdatePdiQualityInput!): PdiQualityModel!
  removePdiQuality(id: Int!): PdiQualityModel!
  createRating(input: CreateRatingInput!): RatingModel!
  updateRating(id: Int!, input: UpdateRatingInput!): RatingModel!
  createPerformedQuestion(input: CreatePerformedQuestionInput!): PerformedQuestionModel!
  updatePerformedQuestion(id: Int!, input: UpdatePerformedQuestionInput!): PerformedQuestionModel!
  createPerformedSkill(input: CreatePerformedSkillInput!): PerformedSkillModel!
  updatePerformedSkill(id: Int!, input: UpdatePerformedSkillInput!): PerformedSkillModel!
  createPerformedGoal(input: PerformedGoalInput!): PerformedGoalModel!
  createPerformedGoalKpi(input: CreatePerformedGoalKpiInput!): PerformedGoalKpiModel!
  updatePerformedGoalKpi(id: Int!, input: UpdatePerformedGoalKpiInput!): PerformedGoalKpiModel!
  createPerformedFeedback(input: CreatePerformedFeedbackInput!): PerformedFeedbackModel!
  updatePerformedFeedback(id: Int!, input: UpdatePerformedFeedbackInput!): PerformedFeedbackModel!
  removePerformedFeedback(id: Int!, input: UpdatePerformedFeedbackInput!): PerformedFeedbackModel!
  createMedia(input: MediaInput!): MediaModel!
  removeMedia(id: Int!): MediaModel!
  createEvaluationResultConcept(input: CreateEvaluationResultConceptInput!): EvaluationResultConceptModel!
  updateEvaluationResultConcept(id: Int!, input: UpdateEvaluationResultConceptInput!): EvaluationResultConceptModel!
  createButton(input: CreateButtonInput!): ButtonModel!
  updateButton(id: Int!, input: UpdateButtonInput!): ButtonModel!
  createTextField(input: CreateTextFieldInput!): TextFieldModel!
  updateTextField(id: Int!, input: UpdateTextFieldInput!): TextFieldModel!
  createHome(input: CreateHomeInput!): HomeModel!
  updateHome(id: Int!, input: UpdateHomeInput!): HomeModel!
  createSignIn(input: CreateSignInInput!): SignInModel!
  updateSignIn(id: Int!, input: UpdateSignInInput!): SignInModel!
}

input SignInInput {
  identifier: String!
  password: String!
}

input CreateUserInput {
  username: String!
  email: String!
  role: String = "USER"
}

input CreateUserAdminInput {
  username: String!
  email: String!
  password: String!
}

input UpdateUserInput {
  idManager: Int
  department: Int
  role: String
  confirmed: Boolean
  blocked: Boolean
  deleted: Boolean
}

input CreateUserInfoInput {
  position: String
  hiringDate: DateTime
  badge: Int
  costCenter: Int
  name: String!
  lastname: String!
}

input UpdateUserInfoInput {
  position: String
  hiringDate: DateTime
  badge: Int
  costCenter: Int
}

input CreateDepartmentInput {
  key: String!
  name: String!
}

input UpdateDepartmentInput {
  name: String!
  locale: String!
}

input CreateSectionInput {
  title: String!
  visibility: VisibilitySectionInput!
}

input VisibilitySectionInput {
  USER: Boolean!
  MANAGER: Boolean!
  COORDINATOR: Boolean!
  DIRECTOR: Boolean!
}

input UpdateSectionInput {
  title: String
  visibility: VisibilitySectionInput
  locale: String = "BR"
}

input CreateQuestionInput {
  ask: String!
}

input UpdateQuestionInput {
  ask: String!
  locale: String!
}

input CreateSkillInput {
  title: String!
  description: String!
}

input UpdateSkillInput {
  title: String
  description: String
  locale: String!
}

input CreateFeedbackInput {
  inquire: String!
}

input UpdateFeedbackInput {
  inquire: String!
  locale: String!
}

input CreateEvaluationInput {
  year: Int!
  mid: CreateEvaluationDateInput!
  end: CreateEvaluationDateInput!
  period: String = "OUT"
}

input CreateEvaluationDateInput {
  start: DateTime!
  deadline: DateTime!
}

input UpdateEvaluationInput {
  year: Int
  mid: CreateEvaluationDateInput
  end: CreateEvaluationDateInput
  period: String
}

input CreateGoalInput {
  name: String!
  idEvaluation: Int!
  idUser: Int!
}

input GoalInput {
  name: String!
}

input CreateKpiInput {
  name: String!
  target: String!
  weight: Int!
  idGoal: Int!
}

input KpiInput {
  name: String!
  target: String!
  weight: Int!
}

input CreatePdiCoachingInput {
  idPerformed: Int!
  category: String!
  action: String!
}

input UpdatePdiCoachingInput {
  category: String
  action: String
}

input UpdatePerformedEvaluationInput {
  midFinished: Boolean
  endFinished: Boolean
}

input CreatePdiCompetenceInput {
  idPerformed: Int!
  idCategory: Int!
  name: String!
  action: String!
  deadline: DateTime!
}

input UpdatePdiCompetenceInput {
  idCategory: Int
  name: String
  action: String
  deadline: DateTime
}

input CreatePdiCompetenceCategoryInput {
  name: String!
}

input CreatePdiQualityInput {
  idPerformed: Int!
  category: String!
  description: String!
}

input UpdatePdiQualityInput {
  category: String
  description: String
}

input CreateRatingInput {
  description: String!
  value: Int!
}

input UpdateRatingInput {
  description: String
  value: Int
  locale: String!
}

input CreatePerformedQuestionInput {
  reply: String
  justification: String
  idPerformed: Int!
  idQuestion: Int!
}

input UpdatePerformedQuestionInput {
  reply: String
  justification: String
}

input CreatePerformedSkillInput {
  ratingUser: Int
  ratingManager: Int
  midFeedbackManager: String
  endFeedbackManager: String
  endFeedbackUser: String
  idPerformed: Int!
  idSkill: Int!
}

input UpdatePerformedSkillInput {
  ratingUser: Int
  ratingManager: Int
  midFeedbackManager: String
  endFeedbackManager: String
  endFeedbackUser: String
}

input CreatePerformedGoalKpiInput {
  ratingManager: Int
  achieved: String
  midFeedbackUser: String
  endFeedbackUser: String
  midFeedbackManager: String
  endFeedbackManager: String
  idPerformedGoal: Int!
  idKpi: Int!
}

input UpdatePerformedGoalKpiInput {
  ratingManager: Int
  achieved: String
  midFeedbackUser: String
  endFeedbackUser: String
  midFeedbackManager: String
  endFeedbackManager: String
}

input CreatePerformedFeedbackInput {
  midReply: String
  endReply: String
  idPerformed: Int!
  idFeedback: Int!
}

input UpdatePerformedFeedbackInput {
  midReply: String
  endReply: String
}

input MediaInput {
  filename: String!
}

input CreateEvaluationResultConceptInput {
  concept: String!
  description: String!
  color: String!
  min: Float!
  max: Float!
}

input UpdateEvaluationResultConceptInput {
  concept: String
  description: String
  color: String
  min: Float
  max: Float
  locale: String!
}

input CreateButtonInput {
  label: String!
  loadingLabel: String
}

input UpdateButtonInput {
  label: String!
  loadingLabel: String
  locale: String!
}

input CreateTextFieldInput {
  labelPlaceholder: String!
}

input UpdateTextFieldInput {
  labelPlaceholder: String!
  locale: String!
}

input CreateHomeInput {
  title: String!
  description: String!
  button: CreateButtonInput!
}

input UpdateHomeInput {
  title: String!
  description: String!
  button: CreateButtonInput!
  locale: String!
}

input CreateSignInInput {
  title: String!
  caption: String!
  usernameTextField: CreateTextFieldInput!
  passwordTextField: CreateTextFieldInput!
  button: CreateButtonInput!
}

input UpdateSignInInput {
  title: String!
  caption: String!
  usernameTextField: CreateTextFieldInput!
  passwordTextField: CreateTextFieldInput!
  button: CreateButtonInput!
  locale: String!
}
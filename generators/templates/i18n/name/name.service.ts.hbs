import { EntityFindOptions } from '@constants/common'
import { LOCALES } from '@constants/locales'
import { ConflictException, Inject, Injectable, NotFoundException } from '@nestjs/common'
import { InjectRepository } from '@nestjs/typeorm'
import { {{pascalCase name}}I18nService } from '@{{kebabCase name}}-i18n/{{kebabCase name}}-i18n.service'
import { Create{{pascalCase (slice name)}}Input } from '@{{kebabCase name}}/dto/create-{{kebabCase (slice name)}}.input'
import { Update{{pascalCase (slice name)}}Input } from '@{{kebabCase name}}/dto/update-{{kebabCase (slice name)}}.input'
import { {{pascalCase (slice name)}}Model } from '@{{kebabCase name}}/entities/{{kebabCase (slice name)}}.entity'
import { Repository } from 'typeorm'

@Injectable()
export class {{pascalCase name}}Service {
  constructor(
    @InjectRepository({{pascalCase (slice name)}}Model) private readonly repo: Repository<{{pascalCase (slice name)}}Model>,
    @Inject({{pascalCase name}}I18nService) private readonly i18nService: {{pascalCase name}}I18nService
  ) {}

  async get(id: number): Promise<{{pascalCase (slice name)}}Model> {
    try {  
      return await this.repo.findOneBy({ id })
    } catch {
      throw new NotFoundException(`{{pascalCase (slice name)}} with id '${id} not found`)
    }
  }

  async list(): Promise<{{pascalCase (slice name)}}Model[]> {
    return await this.repo.find()
  }

  async create({ changeMe }: Create{{pascalCase (slice name)}}Input): Promise<{{pascalCase (slice name)}}Model> {
    if (await this.i18nService.getBy({ changeMe })) {
      throw new ConflictException('{{pascalCase (slice name)}} already exists')
    }

    const {{camelCase (slice name)}} = await this.repo.save(this.repo.create())
    const {{camelCase (slice name)}}Locale = await this.i18nService.create({{camelCase (slice name)}}, { changeMe })

    return { 
      ...{{camelCase (slice name)}}, 
      changeMe: {{camelCase (slice name)}}Locale.changeMe 
    }
  }

  async update(
    id: number,
    { changeMe, locale = LOCALES.BR }: Update{{pascalCase (slice name)}}Input
  ): Promise<{{pascalCase (slice name)}}Model> {
    const {{camelCase (slice name)}} = await this.get(id)
    const {{camelCase (slice name)}}LocaleFound = await this.i18nService.getBy({ changeMe: { id }, locale })
    if ({{camelCase (slice name)}}LocaleFound?.changeMe && {{camelCase (slice name)}}LocaleFound.changeMe === changeMe) {
      return {
        ...{{camelCase (slice name)}},
        changeMe: 
      }
    }

    const {{camelCase (slice name)}}Locale = !{{camelCase (slice name)}}LocaleFound?.changeMe
      ? await this.i18nService.create({{camelCase (slice name)}}, { changeMe, locale })
      : await this.i18nService.update({{camelCase (slice name)}}, { changeMe, locale })

    return { 
      ...{{camelCase (slice name)}}, 
      changeMe: {{camelCase (slice name)}}Locale.changeMe 
    }
  }
}
